name: Version

# When a pull request is created, GitHub Actions will run on it. The workflow will
#
# 1. Check if the pull request title is conventional.
# 2. Determine what the new version should be.
# 3. Suggest corrections to the version of the application in the pull request, if necessary.
#

on:
  workflow_dispatch:
  push:
    paths:
    - poetry.lock
    - pyproject.toml
    - src
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  semantic-version:
    name: Semantic Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Set Up Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git fetch --tags

    - name: Set Up GitHub CLI
      run: gh auth login --with-token <<< '${{ secrets.GITHUB_TOKEN }}'

    - name: Install Tools
      run: pip install commitizen poetry

    - id: squash-commit
      run: gh pr view "$PR_URL" --json title,body,number --jq '"::set-output name=message::\(.title) (#\(.number))\n\n\(.body|sub("\n*$"; ""))"'

    - run: echo 'squash-commit-message = "${{ steps.squash-commit.outputs.message }}"'

    - id: poetry
      run: echo "::set-output name=version::$(poetry version --short)"

    - id: last-tag
      run: echo "::set-output name=version::$(git describe --abbrev=0)"

    - id: next-patch
      run: |
        poetry version --short '${{ steps.last-tag.outputs.version }}'
        poetry version --short patch
        echo "::set-output name=version::$(poetry version --short)"

    - id: next-minor
      run: |
        poetry version --short minor
        echo "::set-output name=version::$(poetry version --short)"

    - id: next-major
      run: |
        poetry version major --short
        echo "::set-output name=version::$(poetry version --short)"

    - run: git checkout -- ./pyproject.toml

    - run: echo "The last tag was ${{ steps.last-tag.outputs.version }}"
    - run: echo "This pull request would tag ${{ steps.poetry.outputs.version }}"
    - run: echo "A patch version would tag ${{ steps.next-patch.outputs.version }}"
    - run: echo "A minor version would tag ${{ steps.next-minor.outputs.version }}"
    - run: echo "A major version would tag ${{ steps.next-major.outputs.version }}"

    - name: Check Version
      run: |
        if grep -qFf <(git tag) <<< '${{ steps.poetry.outputs.version }}'; then
          echo 'This pull request targets a tag (${{ steps.poetry.outputs.version }}) that already exists.'
          echo 'Run `poetry version [patch|minor|major]` to update the version.'
          exit 1
        fi
        case '${{ steps.poetry.outputs.version }}' in
          '${{ steps.next-patch.outputs.version }}') version_type='patch';;
          '${{ steps.next-minor.outputs.version }}') version_type='minor';;
          '${{ steps.next-major.outputs.version }}') version_type='major';;
          *) printf 'This pull request targets a tag (${{ steps.next-major.outputs.version }}) '
             echo 'that is not a patch, minor or major version.'
             echo 'Please fix up the version to one of the versions listed above.'
             exit 1;;
        esac
        echo "This pull request indicates a $version_type version."

    - name: Release '${{ steps.poetry.outputs.version }}'
      if: github.ref == 'refs/heads/main'
      run: |
        git tag -m 'Automatically tagged by action ${{ steps.poetry.outputs.version }}' '${{ steps.poetry.outputs.version }}'
        git push --tags origin '${{ steps.poetry.outputs.version }}'
        # To create a release from an annotated git tag, first create one locally with git, push the tag to GitHub, then run this command.
        poetry build
        gh release create --notes '' '${{ steps.poetry.outputs.version }}' dist/*.tar.gz dist/*.whl
